# -*- coding: utf-8 -*-
"""Ejericico3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xiQGGmZegeXpZokGW5J6x0HLDAyIS2nS
"""

import numpy as np
import matplotlib.pyplot as plt

# Definir la nueva función f(x) = cos(x) - x
def f(x):
    return np.cos(x) - x

# Algoritmo numérico del Método de Bisección
def biseccion(a, b, tol=1e-5, max_iter=100):
    if f(a) * f(b) >= 0:
        print("El método de bisección no es aplicable en el intervalo dado.")
        return None

    iteraciones = []
    errores_absolutos = []
    errores_relativos = []
    errores_cuadraticos = []
    c_old = a  # Para calcular errores

    print("\nIteraciones del Método de Bisección:")
    print("Iter |       a       |       b       |       c       |      f(c)      |     Error Absoluto     |  Error Relativo    | Error Cuadrático ")
    print("-" * 105)

    for i in range(max_iter):
        c = (a + b) / 2
        iteraciones.append(c)

        # Calcular el error absoluto
        error_absoluto = abs(c - c_old)
        errores_absolutos.append(error_absoluto)

        # Calcular el error relativo
        error_relativo = abs(error_absoluto / c) if c != 0 else 0
        errores_relativos.append(error_relativo)

        # Calcular el error cuadrático
        error_cuadratico = error_absoluto ** 2
        errores_cuadraticos.append(error_cuadratico)

        print(f"{i+1:4d} | {a:.8f} | {b:.8f} | {c:.8f} | {f(c):.8f} | {error_absoluto:.8e} | {error_relativo:.8e} | {error_cuadratico:.8e}")

        if abs(f(c)) < tol or error_absoluto < tol:
            break

        if f(a) * f(c) < 0:
            b = c
        else:
            a = c

        c_old = c

    return iteraciones, errores_absolutos, errores_relativos, errores_cuadraticos

# Parámetros iniciales
a, b = 0, 1  # Intervalo [0, 1]
iteraciones, errores_absolutos, errores_relativos, errores_cuadraticos = biseccion(a, b)

# Crear la figura
fig, ax = plt.subplots(figsize=(8, 6))

# Gráfica de los errores
ax.plot(range(1, len(errores_absolutos)+1), errores_absolutos, marker='o', linestyle='-', color='r', label='Error Absoluto')
ax.plot(range(1, len(errores_relativos)+1), errores_relativos, marker='s', linestyle='-', color='g', label='Error Relativo')
ax.plot(range(1, len(errores_cuadraticos)+1), errores_cuadraticos, marker='^', linestyle='-', color='b', label='Error Cuadrático')

ax.set_yscale("log")  # Escala logarítmica
ax.set_xlabel("Iteración")
ax.set_ylabel("Errores")
ax.set_title("Convergencia del Método de Bisección: Errores Absoluto, Relativo y Cuadrático")
ax.legend()
ax.grid()

# Guardar la figura
plt.savefig("biseccion_errores.png", dpi=300)
plt.show()